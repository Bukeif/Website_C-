<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MakeIntellisence</name>
    </assembly>
    <members>
        <member name="T:ProEasyDotNet.ProEasy">
            <summary>
             
              ProEasyAPIClass 
            </summary>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetSystemStatus">
            <summary>
             
              No-Supported 
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.CreateProServerHandle">
            <summary>
             
             
              Obtains a Pro-Server handle for use of a Multi-Handle function. 
            </summary>
            <returns>
             
              Normal end: Other than 0(Handle code)Abnormal end: 0 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.DeleteProServerHandle(System.IntPtr)">
            <summary>
             
             
               Releases an obtained Pro-Server handle. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle to be released 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadNetworkProject(System.String)">
            <summary>
             
              Loads the network project file specified with the argument. 
            </summary>
            <param name="sDBName">
             
               (In) Specify the full path of a network project file to be loaded. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadNetworkProject(System.String,System.Int32)">
            <summary>
             
              Loads the network project file specified with the argument. 
            </summary>
            <param name="sDBName">
             
               (In) Specify the full path of a network project file to be loaded. 
            </param>
            <param name="dwSetOrAdd">
             
               (In  Reserve (Fixed to "1") 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadNetworkProjectM(System.IntPtr,System.String)">
            <summary>
             
              Loads the network project file specified with the argument. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sDBName">
             
               (In) Specify the full path of a network project file to be loaded. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadNetworkProjectM(System.IntPtr,System.String,System.Int32)">
            <summary>
             
              Loads the network project file specified with the argument. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sDBName">
             
               (In) Specify the full path of a network project file to be loaded. 
            </param>
            <param name="dwSetOrAdd">
             
               (In  Reserve (Fixed to "1") 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadErrorMessage(System.Int32,System.String@)">
            <summary>
             
               Converts an error code returned by each API of 'Pro-Server EX' into an error message. 
            </summary>
            <param name="iErrorCode">
             
               (In)  Error code returned by 'Pro-Server EX' function 
            </param>
            <param name="osErrorMessage">
             
               (Out) String type variable that stores converted character string 
            </param>
            <returns>
             
               Return valueNormal end: Other than 0 Failure in character string conversion: 0 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadErrorMessageEx(System.Int32,System.String@)">
            <summary>
             
             
             
               Converts an error code returned by each API of 'Pro-Server EX' into an error message. 
               'Pro-Server EX' then returns the error message together with the error occurrence condition and other information, ifpossible. 
               EasyLoadErrorMessageEx() may return a different error message relative to the same error code, depending on the situation. 
            </summary>
            <param name="iErrorCode">
             
               (In)  Error code returned by 'Pro-Server EX' function 
            </param>
            <param name="osErrorMessage">
             
               (Out) String type variable that stores converted character string 
            </param>
            <returns>
             
               Return valueNormal end: Other than 0 Failure in character string conversion: 0 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadErrorMessageExM(System.IntPtr,System.Int32,System.String@)">
            <summary>
             
             
             
               Converts an error code returned by each API of 'Pro-Server EX' into an error message. 
               'Pro-Server EX' then returns the error message together with the error occurrence condition and other information, ifpossible. 
               EasyLoadErrorMessageEx() may return a different error message relative to the same error code, depending on the situation. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="iErrorCode">
             
               (In)  Error code returned by 'Pro-Server EX' function 
            </param>
            <param name="osErrorMessage">
             
               (Out) String type variable that stores converted character string 
            </param>
            <returns>
             
               Return valueNormal end: Other than 0 Failure in character string conversion: 0 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadErrorMessageExW(System.Int32,System.String@)">
            <summary>
             
             
             
               Converts an error code returned by each API of 'Pro-Server EX' into an error message. 
               'Pro-Server EX' then returns the error message together with the error occurrence condition and other information, ifpossible. 
               EasyLoadErrorMessageEx() may return a different error message relative to the same error code, depending on the situation. 
            </summary>
            <param name="iErrorCode">
             
               (In)  Error code returned by 'Pro-Server EX' function 
            </param>
            <param name="owsErrorMessage">
             
               (Out) String type variable that stores converted character string 
            </param>
            <returns>
             
               Return valueNormal end: Other than 0 Failure in character string conversion: 0 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadErrorMessageExWM(System.IntPtr,System.Int32,System.String@)">
            <summary>
             
             
             
               Converts an error code returned by each API of 'Pro-Server EX' into an error message. 
               'Pro-Server EX' then returns the error message together with the error occurrence condition and other information, ifpossible. 
               EasyLoadErrorMessageEx() may return a different error message relative to the same error code, depending on the situation. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="iErrorCode">
             
               (In)  Error code returned by 'Pro-Server EX' function 
            </param>
            <param name="owsErrorMessage">
             
               (Out) String type variable that stores converted character string 
            </param>
            <returns>
             
               Return valueNormal end: Other than 0 Failure in character string conversion: 0 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyLoadErrorMessageW(System.Int32,System.String@)">
            <summary>
             
               Converts an error code returned by each API of 'Pro-Server EX' into an error message. 
            </summary>
            <param name="iErrorCode">
             
               (In)  Error code returned by 'Pro-Server EX' function 
            </param>
            <param name="owsErrorMessage">
             
               (Out) String type variable that stores converted character string 
            </param>
            <returns>
             
               Return valueNormal end: Other than 0 Failure in character string conversion: 0 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyInit">
            <summary>
             
             
              Initializes a Pro-Server EX API, and declares use of the API internally.
              If you execute EasyInit() without starting 'Pro-Server EX', 'Pro-Server EX' will automatically start. 
            </summary>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyTerm">
            <summary>
             
             
               This API is intended to ensure compatibility with older versions of 'Pro-Server'.
               With 'Pro-Server EX', you need not call this API. (Even if you call this API, it will not be executed.) 
            </summary>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyTermServer">
            <summary>
             
             
             
               Closes 'Pro-Server EX'. 
               After calling this API, do not call any API of 'Pro-Server EX'. 
               Before calling this API, be sure to discard Pro-Server handles etc. 
            </summary>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyNotifyFromServerEnd(System.IntPtr,System.Int32)">
            <summary>
             
             
             
              This API allows you to know the 'Pro-Server EX' closing status.
              When 'Pro-Server EX' starts closing processing, it sends a specified message to the window registered with this API byusing PostMessage() of Windows API. 
              When the application receives the message from the window, it recognizes that 'Pro-Server EX' will be immediatelyclosed.
            </summary>
            <param name="hReceivedWnd">
             
               (In) Window that receives a closing message. 
            </param>
            <param name="uMessage">
             
               (In) Message ID to be sent as a closing message. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyNotifyFromServerEnd(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
             
             
             
              This API allows you to know the 'Pro-Server EX' closing status.
              When 'Pro-Server EX' starts closing processing, it sends a specified message to the window registered with this API byusing PostMessage() of Windows API. 
              When the application receives the message from the window, it recognizes that 'Pro-Server EX' will be immediatelyclosed.
            </summary>
            <param name="hReceivedWnd">
             
               (In) Window that receives a closing message. 
            </param>
            <param name="uMessage">
             
               (In) Message ID to be sent as a closing message. 
            </param>
            <param name="WParam">
             
               (In) WPARAM to be sent together with the message (Value of WPARAM in PostMessage()) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyNotifyFromServerEnd(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
             
             
             
              This API allows you to know the 'Pro-Server EX' closing status.
              When 'Pro-Server EX' starts closing processing, it sends a specified message to the window registered with this API byusing PostMessage() of Windows API. 
              When the application receives the message from the window, it recognizes that 'Pro-Server EX' will be immediatelyclosed.
            </summary>
            <param name="hReceivedWnd">
             
               (In) Window that receives a closing message. 
            </param>
            <param name="uMessage">
             
               (In) Message ID to be sent as a closing message. 
            </param>
            <param name="WParam">
             
               (In) WPARAM to be sent together with the message (Value of WPARAM in PostMessage()) 
            </param>
            <param name="LParam">
             
               (In) LPARAM to be sent together with the message (Value of LPARAM in PostMessage()) 
            </param>
            <returns>
          
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyNotifyFromServerEndM(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
             
             
             
              This API allows you to know the 'Pro-Server EX' closing status.
              When 'Pro-Server EX' starts closing processing, it sends a specified message to the window registered with this API byusing PostMessage() of Windows API. 
              When the application receives the message from the window, it recognizes that 'Pro-Server EX' will be immediatelyclosed.
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="hReceivedWnd">
             
               (In) Window that receives a closing message. 
            </param>
            <param name="uMessage">
             
               (In) Message ID to be sent as a closing message. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyNotifyFromServerEndM(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
             
             
             
              This API allows you to know the 'Pro-Server EX' closing status.
              When 'Pro-Server EX' starts closing processing, it sends a specified message to the window registered with this API byusing PostMessage() of Windows API. 
              When the application receives the message from the window, it recognizes that 'Pro-Server EX' will be immediatelyclosed.
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="hReceivedWnd">
             
               (In) Window that receives a closing message. 
            </param>
            <param name="uMessage">
             
               (In) Message ID to be sent as a closing message. 
            </param>
            <param name="WParam">
             
               (In) WPARAM to be sent together with the message (Value of WPARAM in PostMessage()) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyNotifyFromServerEndM(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
             
             
             
              This API allows you to know the 'Pro-Server EX' closing status.
              When 'Pro-Server EX' starts closing processing, it sends a specified message to the window registered with this API byusing PostMessage() of Windows API. 
              When the application receives the message from the window, it recognizes that 'Pro-Server EX' will be immediatelyclosed.
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="hReceivedWnd">
             
               (In) Window that receives a closing message. 
            </param>
            <param name="uMessage">
             
               (In) Message ID to be sent as a closing message. 
            </param>
            <param name="WParam">
             
               (In) WPARAM to be sent together with the message (Value of WPARAM in PostMessage()) 
            </param>
            <param name="LParam">
             
               (In) LPARAM to be sent together with the message (Value of LPARAM in PostMessage()) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasySetWaitType(System.Int32)">
            <summary>
             
             
             
             
             
              Most of the Pro-Server EX APIs (functions) process Windows messages during the processing of a function if the processing time would be long. This API can specify whether to execute or inhibit the Windows message processing. 
              When Windows message processing is inhibited, the relevant Windows message is stored in the message queue, and will not be processed during execution of a function.  
              As a result, you will not call a function over again by clicking the icon during execution of the function.  
              In this case, however, the processing of all the Windows messages as well as an "icon click" message, will be inhibited, and the processing of important messages for timer and window re-drawing is also disabled. 
              You can specify whether to execute or inhibit the processing of Windows messages for each Pro-Server EX handle. 
              With the default setting, message processing has been set to "Execute". 
            </summary>
            <param name="dwWaitType">
             
               (In) To execute message processing, specify "1".To inhibit message processing, specify "2". 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasySetWaitTypeM(System.IntPtr,System.Int32)">
            <summary>
             
             
             
             
             
              Most of the Pro-Server EX APIs (functions) process Windows messages during the processing of a function if the processing time would be long. This API can specify whether to execute or inhibit the Windows message processing. 
              When Windows message processing is inhibited, the relevant Windows message is stored in the message queue, and will not be processed during execution of a function.  
              As a result, you will not call a function over again by clicking the icon during execution of the function.  
              In this case, however, the processing of all the Windows messages as well as an "icon click" message, will be inhibited, and the processing of important messages for timer and window re-drawing is also disabled. 
              You can specify whether to execute or inhibit the processing of Windows messages for each Pro-Server EX handle. 
              With the default setting, message processing has been set to "Execute". 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="dwWaitType">
             
               (In) To execute message processing, specify "1".To inhibit message processing, specify "2". 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetWaitType">
            <summary>
             
              Acquires the current message processing mode during a call of a Pro-Server EX API. 
            </summary>
            <returns>
             
              1: Executes messageprocessing.   2: Inhibits messageprocessing. 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetWaitTypeM(System.IntPtr)">
            <summary>
             
             Acquires the current message processing mode during a call of a Pro-Server EX API. The Multi-Handle API returns the current message processing mode for each handle. 
            </summary>
            <param name="hProServer">
             
               (In) Handle subjected to status acquisition 
            </param>
            <returns>
             
              1: Executes messageprocessing.   2: Inhibits messageprocessing. 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyOutputLog(System.Byte,System.String,System.String)">
            <summary>
             
             
              A specific message is recorded. 
              You can see the recorded information through the log viewer 
            </summary>
            <param name="bLevel">
             
               (In) Event type 
            </param>
            <param name="sPrompt">
             
               (In) Character string indicating event occurrence position (NULL-terminated) 
            </param>
            <param name="sMessage">
             
               (In) Character string of the message to be recorded (NULL-terminated) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyOutputLogClear">
            <summary>
             
              Clears the information recorded by EasyOutputLog(). 
            </summary>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice16(System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              Data reading of 16 bits 	 
              When cash exists, the value is returned.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In)  Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out)  Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice16M(System.IntPtr,System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              Data reading of 16 bits( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In)  Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out)  Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice16D(System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
                
              Data reading of 16 bits 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In)  Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out)  Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice16DM(System.IntPtr,System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              Data reading of 16 bits( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In)  Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice32(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of 32 bits 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice32M(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of 32 bits( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice32D(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of 32 bits 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
            
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>		
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice32DM(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of 32 bits( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD16(System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 16 bits 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD16D(System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 16 bits 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD16DM(System.IntPtr,System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 16 bits( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD16M(System.IntPtr,System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 16 bits( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD32(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 32 bits 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD32D(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 32 bits 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD32DM(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 32 bits( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             	
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD32M(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 32 bits( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBit(System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              BIT form data reading 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBitD(System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              BIT form data reading 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBitDM(System.IntPtr,System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              BIT form data reading( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBitM(System.IntPtr,System.String,System.String,System.Int16[]@,System.Int16)">
            <summary>
             
             
              BIT form data reading( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDouble(System.String,System.String,System.Double[]@,System.Int16)">
            <summary>
             
             
              Floating point of double precision data reading 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDoubleD(System.String,System.String,System.Double[]@,System.Int16)">
            <summary>
             
             
              Floating point of double precision data reading 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDoubleDM(System.IntPtr,System.String,System.String,System.Double[]@,System.Int16)">
            <summary>
             
             
              Floating point of double precision data reading( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDoubleM(System.IntPtr,System.String,System.String,System.Double[]@,System.Int16)">
            <summary>
             
             
              Floating point of double precision data reading( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceFloat(System.String,System.String,System.Single[]@,System.Int16)">
            <summary>
             
             
              Floating point of single precision data reading 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceFloatD(System.String,System.String,System.Single[]@,System.Int16)">
            <summary>
             
             
              Floating point of single precision data reading 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceFloatDM(System.IntPtr,System.String,System.String,System.Single[]@,System.Int16)">
            <summary>
             
             
              Floating point of single precision data reading( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceFloatM(System.IntPtr,System.String,System.String,System.Single[]@,System.Int16)">
            <summary>
             
             
              Floating point of single precision data reading( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceStr(System.String,System.String,System.Text.StringBuilder@,System.Int16)">
            <summary>
             
             
              Character-string data reading 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="psData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceStrD(System.String,System.String,System.Text.StringBuilder@,System.Int16)">
            <summary>
             
             
              Character-string data reading 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="psData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceStrDM(System.IntPtr,System.String,System.String,System.Text.StringBuilder@,System.Int16)">
            <summary>
             
             
              Character-string data reading( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="psData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceStrM(System.IntPtr,System.String,System.String,System.Text.StringBuilder@,System.Int16)">
            <summary>
             
             
              Character-string data reading( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="psData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceVariant(System.String,System.String,ProEasyDotNet.ProEasy.EasyObject@,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) reading 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceVariantD(System.String,System.String,ProEasyDotNet.ProEasy.EasyObject@,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) reading 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceVariantDM(System.IntPtr,System.String,System.String,ProEasyDotNet.ProEasy.EasyObject@,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) reading( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceVariantM(System.IntPtr,System.String,System.String,ProEasyDotNet.ProEasy.EasyObject@,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) reading( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadSymbolVariant(System.String,System.String,ProEasyDotNet.ProEasy.EasyObject@)">
            <summary>
             
             
              General-purpose data(Object) reading 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (Out) Variable that stores read data 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadSymbolVariantD(System.String,System.String,ProEasyDotNet.ProEasy.EasyObject@)">
            <summary>
             
             
              General-purpose data(Object) reading 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (Out) Variable that stores read data 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadSymbolVariantDM(System.IntPtr,System.String,System.String,ProEasyDotNet.ProEasy.EasyObject@)">
            <summary>
             
             
              General-purpose data(Object) reading( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (Out) Variable that stores read data 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadSymbolVariantM(System.IntPtr,System.String,System.String,ProEasyDotNet.ProEasy.EasyObject@)">
            <summary>
             
             
              General-purpose data(Object) reading( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (Out) Variable that stores read data 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice8(System.String,System.String,System.Byte[]@,System.Int16)">
            <summary>
             
             
              Data reading of 8 bits 	 
              When cash exists, the value is returned.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In)  Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (Out)  Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice8M(System.IntPtr,System.String,System.String,System.Byte[]@,System.Int16)">
            <summary>
             
             
              Data reading of 8 bits( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In)  Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (Out)  Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice8D(System.String,System.String,System.Byte[]@,System.Int16)">
            <summary>
             
                
              Data reading of 8 bits 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In)  Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (Out)  Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDevice8DM(System.IntPtr,System.String,System.String,System.Byte[]@,System.Int16)">
            <summary>
             
             
              Data reading of 8 bits( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In)  Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD8(System.String,System.String,System.Byte[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 8 bits 
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD8M(System.IntPtr,System.String,System.String,System.Byte[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 8 bits( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD8D(System.String,System.String,System.Byte[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 8 bits 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceBCD8DM(System.IntPtr,System.String,System.String,System.Byte[]@,System.Int16)">
            <summary>
             
             
              BCD form data reading of 8 bits( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceTIME(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of TIME data type
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceTIMEM(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of TIME data type( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceTIMED(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of TIME data type 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>		
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceTIMEDM(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of TIME data type( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceTIME_OF_DAY(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of TIME_OF_DAY data type
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceTIME_OF_DAYM(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of TIME_OF_DAY data type( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
           		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceTIME_OF_DAYD(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of TIME_OF_DAY data type 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>		
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceTIME_OF_DAYDM(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of TIME_OF_DAY data type( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDATE(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of DATE data type
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDATEM(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of DATE data type( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDATED(System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of DATE data type 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>		
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDATEDM(System.IntPtr,System.String,System.String,System.Int32[]@,System.Int16)">
            <summary>
             
             
              Data reading of DATE data type( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDATE_AND_TIME(System.String,System.String,System.Int64[]@,System.Int16)">
            <summary>
             
             
              Data reading of DATE_AND_TIME data type
              When cash exists, the value is returned. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pqwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDATE_AND_TIMEM(System.IntPtr,System.String,System.String,System.Int64[]@,System.Int16)">
            <summary>
             
             
              Data reading of DATE_AND_TIME data type( multi steering wheel system ) 
              When cash exists, the value is returned. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pqwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDATE_AND_TIMED(System.String,System.String,System.Int64[]@,System.Int16)">
            <summary>
             
             
              Data reading of DATE_AND_TIME data type 
              Cash is not used. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pqwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>		
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ReadDeviceDATE_AND_TIMEDM(System.IntPtr,System.String,System.String,System.Int64[]@,System.Int16)">
            <summary>
             
             
              Data reading of DATE_AND_TIME data type( multi steering wheel system ) 
              Cash is not used. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pqwData">
             
               (Out) Variable that stores read data 
            </param>
            <param name="wCount">
        
               (In) Data count 
            </param>
            <returns>
             		
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice16(System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              Data writing of 16 bits 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice16D(System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              Data writing of 16 bits 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice16DM(System.IntPtr,System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              Data writing of 16 bits( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice16M(System.IntPtr,System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              Data writing of 16 bits( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice32(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of 32 bits 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice32D(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of 32 bits 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice32DM(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of 32 bits( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice32M(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of 32 bits( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD16(System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD16D(System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 16 bits 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD16DM(System.IntPtr,System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 16 bits( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD16M(System.IntPtr,System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 16 bits( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD32(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 32 bits 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD32D(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 32 bits 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD32DM(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 32 bits( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD32M(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 32 bits( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBit(System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              Bit form data writing 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBitD(System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              Bit form data writing 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBitDM(System.IntPtr,System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              Bit form data writing( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBitM(System.IntPtr,System.String,System.String,System.Int16[],System.Int16)">
            <summary>
             
             
              Bit form data writing( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDouble(System.String,System.String,System.Double[],System.Int16)">
            <summary>
             
             
              Floating point of double precision data writing 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDoubleD(System.String,System.String,System.Double[],System.Int16)">
            <summary>
             
             
              Floating point of double precision data writing 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDoubleDM(System.IntPtr,System.String,System.String,System.Double[],System.Int16)">
            <summary>
             
             
              Floating point of double precision data writing( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDoubleM(System.IntPtr,System.String,System.String,System.Double[],System.Int16)">
            <summary>
             
             
              Floating point of double precision data writing( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceFloat(System.String,System.String,System.Single[],System.Int16)">
            <summary>
             
             
              Floating point of single precision data writing 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceFloatD(System.String,System.String,System.Single[],System.Int16)">
            <summary>
             
             
              Floating point of single precision data writing 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceFloatDM(System.IntPtr,System.String,System.String,System.Single[],System.Int16)">
            <summary>
             
             
              Floating point of single precision data writing( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceFloatM(System.IntPtr,System.String,System.String,System.Single[],System.Int16)">
            <summary>
             
             
              Floating point of single precision data writing( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceStr(System.String,System.String,System.String,System.Int16)">
            <summary>
             
             
              Character-string data writing 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="psData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceStrD(System.String,System.String,System.String,System.Int16)">
            <summary>
             
             
              Character-string data writing 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="psData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceStrDM(System.IntPtr,System.String,System.String,System.String,System.Int16)">
            <summary>
             
             
              Character-string data writing( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="psData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceStrM(System.IntPtr,System.String,System.String,System.String,System.Int16)">
            <summary>
             
             
              Character-string data writing( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="psData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceVariant(System.String,System.String,System.Object,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) writing 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceVariant(System.String,System.String,ProEasyDotNet.ProEasy.EasyObject,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) writing 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceVariantD(System.String,System.String,System.Object,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) writing 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceVariantD(System.String,System.String,ProEasyDotNet.ProEasy.EasyObject,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) writing 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceVariantDM(System.IntPtr,System.String,System.String,System.Object,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) writing( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceVariantDM(System.IntPtr,System.String,System.String,ProEasyDotNet.ProEasy.EasyObject,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) writing( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceVariantM(System.IntPtr,System.String,System.String,System.Object,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) writing( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceVariantM(System.IntPtr,System.String,System.String,ProEasyDotNet.ProEasy.EasyObject,System.Int16,System.Int16)">
            <summary>
             
             
              General-purpose data(Object) writing( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <param name="wAppKind">
             
               (In) Please specify the value of eEASY_AppKind. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteSymbolVariant(System.String,System.String,System.Object)">
            <summary>
             
             
              General-purpose data(Object) writing 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (In) Variable where written data is stored 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteSymbolVariant(System.String,System.String,ProEasyDotNet.ProEasy.EasyObject)">
            <summary>
             
             
              General-purpose data(Object) writing 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
        
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (In) Variable where written data is stored 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteSymbolVariantD(System.String,System.String,System.Object)">
            <summary>
             
             
              General-purpose data(Object) writing 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (In) Variable where written data is stored 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteSymbolVariantD(System.String,System.String,ProEasyDotNet.ProEasy.EasyObject)">
            <summary>
             
             
              General-purpose data(Object) writing 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (In) Variable where written data is stored 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteSymbolVariantDM(System.IntPtr,System.String,System.String,System.Object)">
            <summary>
             
             
              General-purpose data(Object) writing( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (In) Variable where written data is stored 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteSymbolVariantDM(System.IntPtr,System.String,System.String,ProEasyDotNet.ProEasy.EasyObject)">
            <summary>
             
             
              General-purpose data(Object) writing( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (In) Variable where written data is stored 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteSymbolVariantM(System.IntPtr,System.String,System.String,System.Object)">
            <summary>
             
             
              General-purpose data(Object) writing( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (In) Variable where written data is stored 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteSymbolVariantM(System.IntPtr,System.String,System.String,ProEasyDotNet.ProEasy.EasyObject)">
            <summary>
             
             
              General-purpose data(Object) writing( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Specify the symbol name 
            </param>
            <param name="poData">
             
               (In) Variable where written data is stored 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice8(System.String,System.String,System.Byte[],System.Int16)">
            <summary>
             
             
              Data writing of 8 bits 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice8D(System.String,System.String,System.Byte[],System.Int16)">
            <summary>
             
             
              Data writing of 8 bits 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice8DM(System.IntPtr,System.String,System.String,System.Byte[],System.Int16)">
            <summary>
             
             
              Data writing of 8 bits( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDevice8M(System.IntPtr,System.String,System.String,System.Byte[],System.Int16)">
            <summary>
             
             
              Data writing of 8 bits( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD8(System.String,System.String,System.Byte[],System.Int16)">
            <summary>
             
             
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD8D(System.String,System.String,System.Byte[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 8 bits 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD8DM(System.IntPtr,System.String,System.String,System.Byte[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 8 bits( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceBCD8M(System.IntPtr,System.String,System.String,System.Byte[],System.Int16)">
            <summary>
             
             
              BCD form data writing of 8 bits( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pbData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceTIME(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of TIME data type 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceTIMED(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of TIME data type 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceTIMEDM(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of TIME data type( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceTIMEM(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of TIME data type( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceTIME_OF_DAY(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of TIME_OF_DAY data type 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceTIME_OF_DAYD(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of TIME_OF_DAY data type 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceTIME_OF_DAYDM(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of TIME_OF_DAY data type( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceTIME_OF_DAYM(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of TIME_OF_DAY data type( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDATE(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of DATE data type 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDATED(System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of DATE data type 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDATEDM(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of DATE data type( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDATEM(System.IntPtr,System.String,System.String,System.Int32[],System.Int16)">
            <summary>
             
             
              Data writing of DATE data type( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pdwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDATE(System.String,System.String,System.Int64[],System.Int16)">
            <summary>
             
             
              Data writing of DATE_AND_TIME data type 
              When cash exists, the value is updated 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pqwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDATED(System.String,System.String,System.Int64[],System.Int16)">
            <summary>
             
             
              Data writing of DATE_AND_TIME data type 
              The value of cash is not updated.  
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pqwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDATEDM(System.IntPtr,System.String,System.String,System.Int64[],System.Int16)">
            <summary>
             
             
              Data writing of DATE_AND_TIME data type( multi steering wheel system ) 
              The value of cash is not updated.  
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pqwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.WriteDeviceDATEM(System.IntPtr,System.String,System.String,System.Int64[],System.Int16)">
            <summary>
             
             
              Data writing of DATE_AND_TIME data type( multi steering wheel system ) 
              When cash exists, the value is updated 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sDeviceName">
             
               (In) Specify the symbol name or the device address 
            </param>
            <param name="pqwData">
             
               (In) Variable where written data is stored 
            </param>
            <param name="wCount">
             
               (In) Data count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.BeginQueuingRead">
            <summary>
             
             
              After this API is called, 'Pro-Server EX' queues device read requests until ExecuteQueuingAccess() is called.
            </summary>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.BeginQueuingReadM(System.IntPtr)">
            <summary>
             
             
             
              After this API is called, 'Pro-Server EX' queues device read requests until ExecuteQueuingAccess() is called.
              Queuing is executed for each Pro-Server handle. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.BeginQueuingWrite">
            <summary>
             
             
              After this API is called, 'Pro-Server EX' queues device write requests until ExecuteQueuingAccess() is called.
            </summary>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.BeginQueuingWriteM(System.IntPtr)">
            <summary>
             
             
             
              After this API is called, 'Pro-Server EX' queues device write requests until ExecuteQueuingAccess() is called.
              Queuing is executed for each Pro-Server handle. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ExecuteQueuingAccess">
            <summary>
             
              Accesses device data according to the device read/write request in queue. 
            </summary>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.ExecuteQueuingAccessM(System.IntPtr)">
            <summary>
             
              Accesses device data according to the device read/write request in queue. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.CancelQueuingAccess">
            <summary>
             
             Discards the device read/write request in queue. 
            </summary>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.CancelQueuingAccessM(System.IntPtr)">
            <summary>
             
             Discards the device read/write request in queue. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.IsQueuingAccessSucceeded(System.Int32)">
            <summary>
             
              Checks whether or not each device access request has been successfully executed, after ExecuteQueuingAccess() is called. 
            </summary>
            <param name="iIndex">
             
               (In) Number of request to be checked 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.IsQueuingAccessSucceededM(System.IntPtr,System.Int32)">
            <summary>
             
              Checks whether or not each device access request has been successfully executed, after ExecuteQueuingAccess() is called. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="iIndex">
             
               (In) Number of request to be checked 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_CreateCache(System.String,System.Int32)">
            <summary>
             
             
               To increase the device read processing speed, 'Pro-Server EX' incorporates the device data caching function (with copyfunction). This API is used to create a cache buffer.
               This API only defines a cache buffer. To define which device to cache, use PS_EntryCacheRecord(). 
            </summary>
            <param name="sCacheName">
             
               (In) Cache buffer name 
            </param>
            <param name="dwPollingTime">
             
               (In) To select the constant monitoring method, specify "0". The cache buffer is updated as fast as possible. 
                If you specify any value other than i0i, the polling method is selected.  Specify the polling cycle (cache updating cycle) by the millisecond. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_CreateCacheM(System.IntPtr,System.String,System.Int32)">
            <summary>
             
             
               To increase the device read processing speed, 'Pro-Server EX' incorporates the device data caching function (with copyfunction). This API is used to create a cache buffer.
               This API only defines a cache buffer. To define which device to cache, use PS_EntryCacheRecord(). 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sCacheName">
             
               (In) Cache buffer name 
            </param>
            <param name="dwPollingTime">
             
               (In) To select the constant monitoring method, specify "0". The cache buffer is updated as fast as possible. 
                If you specify any value other than i0i, the polling method is selected.  Specify the polling cycle (cache updating cycle) by the millisecond. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_EntryCacheRecord(System.String,System.String,System.String,System.Int16,System.Int16)">
            <summary>
             
              Registers a caching device (cache source device) into the cache buffer created with PS_CreateCache(). 
            </summary>
            <param name="sCacheName">
             
               (In) Cache buffer name 
            </param>
            <param name="sNodeName">
             
               (In) Entry node name with cache source Device/PLC name 
            </param>
            <param name="sDevice">
             
               (In) Cache source device 
            </param>
            <param name="wAppKind">
             
               (In) Source device data type 
            </param>
            <param name="wCount">
           
               (In) Device data quantity subjected to caching 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_EntryCacheRecordM(System.IntPtr,System.String,System.String,System.String,System.Int16,System.Int16)">
            <summary>
             
              Registers a caching device (cache source device) into the cache buffer created with PS_CreateCache(). 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sCacheName">
             
               (In) Cache buffer name 
            </param>
            <param name="sNodeName">
             
               (In) Entry node name with cache source Device/PLC name 
            </param>
            <param name="sDevice">
             
               (In) Cache source device 
            </param>
            <param name="wAppKind">
             
               (In) Source device data type 
            </param>
            <param name="wCount">
             
               (In) Device data quantity subjected to caching 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_StartCache(System.String)">
            <summary>
             
              Starts caching. 
            </summary>
            <param name="sCacheName">
             
               (In) Name of cache buffer to start 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_StartCacheM(System.IntPtr,System.String)">
            <summary>
             
              Starts caching. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sCacheName">
             
               (In) Name of cache buffer to start 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_StopCache(System.String)">
            <summary>
             
              Temporarily stops caching. Caching stops, but definition of the cache buffer is retained. To restart caching, call PS_StartCache(). 
            </summary>
            <param name="sCacheName">
             
               (In) Name of cache buffer to stop 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_StopCacheM(System.IntPtr,System.String)">
            <summary>
             
              Temporarily stops caching. Caching stops, but definition of the cache buffer is retained. To restart caching, call PS_StartCache(). 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sCacheName">
             
               (In) Name of cache buffer to stop 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_GetCacheStatus(System.String)">
            <summary>
             
              Checks caching status. 
            </summary>
            <param name="sCacheName">
             
               (In) Name of cache buffer to be checked 
            </param>
            <returns>
             
             
             
             
             	0 : The cache buffer has been created, but notstarted yet. 
             	1 : Caching in progress 
             	2 : Caching under suspension 
             	XX: Error code 
            </returns>	
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_GetCacheStatusM(System.IntPtr,System.String)">
            <summary>
             
              Checks caching status. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sCacheName">
             
               (In) Name of cache buffer to be checked 
            </param>
            <returns>
             
             
             
             
             	0 : The cache buffer has been created, but notstarted yet. 
             	1 : Caching in progress 
             	2 : Caching under suspension 
             	XX: Error code 
            </returns>	
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_DestroyCache(System.String)">
            <summary>
             
              Stops caching, and discards the cache buffer. 
            </summary>
            <param name="sCacheName">
             
               (In) Name of cache buffer to be discarded 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_DestroyCacheM(System.IntPtr,System.String)">
            <summary>
             
              Stops caching, and discards the cache buffer. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sCacheName">
             
               (In) Name of cache buffer to be discarded 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_SetNotifyFromCache(System.String,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
             
             
              Sets the function to notify cache buffer update status to a specified window. 
              After these settings are normally completed, the API returns the ID that identifies the currently-set notification function. 
            </summary>
            <param name="sCacheName">
             
               (In) Cache buffer name 
            </param>
            <param name="hWnd">
          
               (In) Handle for the window to receive the message 
            </param>
            <param name="message">
             
               (In) Message ID to be sent to the window 
            </param>
            <param name="WParam">
             
               (In) WPARAM value to be sent to the window together with message ID 
            </param>
            <param name="LParam">
             
               (In) LPARAM value to be sent to the window together with message ID 
            </param>
            <param name="ohCacheNotifyID">
             
               (Out) Returns the ID that identifies the currently set notification function. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_SetNotifyFromCacheM(System.IntPtr,System.String,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
             
             
              Sets the function to notify cache buffer update status to a specified window. 
              After these settings are normally completed, the API returns the ID that identifies the currently-set notification function. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sCacheName">
             
               (In) Cache buffer name 
            </param>
            <param name="hWnd">
             
               (In) Handle for the window to receive the message 
            </param>
            <param name="message">
             
               (In)  Message ID to be sent to the window 
            </param>
            <param name="WParam">
             
               (In) WPARAM value to be sent to the window together with message ID 
            </param>
            <param name="LParam">
             
               (In) LPARAM value to be sent to the window together with message ID 
            </param>
            <param name="ohCacheNotifyID">
             
               (Out) Returns the ID that identifies the currently set notification function. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_AcceptNextNotifyFromCache(System.IntPtr)">
            <summary>
             
              Accepts the next cache update notification. 
            </summary>
            <param name="hCacheNotifyID">
             
               (In) ID of next message acceptance notification function 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_AcceptNextNotifyFromCacheM(System.IntPtr,System.IntPtr)">
            <summary>
             
              Accepts the next cache update notification. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="hCacheNotifyID">
             
               (In) ID of next message acceptance notification function 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_KillNotifyFromCache(System.IntPtr)">
            <summary>
             
              Cancels the function for sending a cache buffer update message to a specified window. 
            </summary>
            <param name="hCacheNotifyID">
             
               (In) ID of the notification function to be canceled 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_KillNotifyFromCacheM(System.IntPtr,System.IntPtr)">
            <summary>
             
              Cancels the function for sending a cache buffer update message to a specified window. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="hCacheNotifyID">
             
               (In) ID of the notification function to be canceled 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_GetUpdateCounter(System.String,System.Int32@)">
            <summary>
             
              Returns a cache buffer update count. 
            </summary>
            <param name="sCacheName">
             
               (In) Name of cache buffer to be monitored 
            </param>
            <param name="odwCount">
             
               (Out) Cache buffer update count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.PS_GetUpdateCounterM(System.IntPtr,System.String,System.Int32@)">
            <summary>
             
              Returns a cache buffer update count. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sCacheName">
             
               (In) Name of cache buffer to be monitored 
            </param>
            <param name="odwCount">
             
               (Out) Cache buffer update count 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataRead(System.String,System.String,System.Int16,System.Int16)">
            <summary>
             
             
              Reads the Specification data stored in the SRAM of a GP Series node, and saves the data into a file on the PC.  
              Filing data are saved in binary format, and other types of data are saved in CSV format. 
            </summary>
            <param name="sSaveFileName">
             
               (In) File path of the file to save read data. 
            </param>
            <param name="sNodeName">
             
               (In) Name of read data source node.(Pro-Server EX nodes cannot be specified ) 
            </param>
            <param name="iBackupDataType">
             
               (In) Please select it from eEASY_BackupDataType.  
            </param>
            <param name="iSaveMode">
             
               (In) Specified Saving mode in eEASY_BackupData_SaveMode 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataReadEx(System.String,System.String,System.Int16,System.Int16)">
            <summary>
             
             
              Reads the Specification data stored in the SRAM of a GP Series node, and saves the data into a file on the PC.  
              Filing data are saved in binary format, and other types of data are saved in CSV format. 
            </summary>
            <param name="sSaveFileName">
             
               (In) File path of the file to save read data. 
            </param>
            <param name="sNodeName">
             
               (In) Name of read data source node.(Pro-Server EX nodes cannot be specified ) 
            </param>
            <param name="iBackupDataType">
             
               (In) Please select it from eEASY_BackupDataType.  
            </param>
            <param name="iSaveMode">
            
               (In) Specified Saving mode in eEASY_BackupData_SaveMode 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
            <remarks>
            
             Unlike EasyBackupDataRead(), this API enables access to extended data for the GP3000 Series and WinGP. 
            </remarks>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataReadEx(System.String,System.String,System.Int16,System.Int16,System.Int32)">
            <summary>
             
             
              Reads the Specification data stored in the SRAM of a GP Series node, and saves the data into a file on the PC.  
              Filing data are saved in binary format, and other types of data are saved in CSV format. 
            </summary>
            <param name="sSaveFileName">
             
               (In) File path of the file to save read data. 
            </param>
            <param name="sNodeName">
             
               (In) Name of read data source node.(Pro-Server EX nodes cannot be specified ) 
            </param>
            <param name="iBackupDataType">
             
               (In) Please select it from eEASY_BackupDataType.  
            </param>
            <param name="iSaveMode">
             
               (In) Specified Saving mode in eEASY_BackupData_SaveMode 
            </param>
            <param name="iNumber">
             
             
               (In) Data type that gives priority 
               This argument is valid when sSaveFileName specifies a file of the GP3000Series and WinGP. For a file of the GP Series, this argument is ignored. 
               In addition, the meaning of this argument varies depending on the value of iBackupDataType. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
            <remarks>
            
             Unlike EasyBackupDataRead(), this API enables access to extended data for the GP3000 Series and WinGP. 
            </remarks>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataReadEx(System.String,System.String,System.Int16,System.Int16,System.Int32,System.Int32)">
            <summary>
             
             
              Reads the Specification data stored in the SRAM of a GP Series node, and saves the data into a file on the PC.  
              Filing data are saved in binary format, and other types of data are saved in CSV format. 
            </summary>
            <param name="sSaveFileName">
             
               (In) File path of the file to save read data. 
            </param>
            <param name="sNodeName">
             
               (In) Name of read data source node.(Pro-Server EX nodes cannot be specified ) 
            </param>
            <param name="iBackupDataType">
             
               (In) Please select it from eEASY_BackupDataType.  
            </param>
            <param name="iSaveMode">
             
               (In) Specified Saving mode in eEASY_BackupData_SaveMode 
            </param>
            <param name="iNumber">
             
             
               (In) Data type that gives priority 
               This argument is valid when sSaveFileName specifies a file of the GP3000Series and WinGP. For a file of the GP Series, this argument is ignored. 
               In addition, the meaning of this argument varies depending on the value of iBackupDataType. 
            </param>
            <param name="iStringTable">
             
               (In) Reserve Always specify "0". 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
            <remarks>
             
              Unlike EasyBackupDataRead(), this API enables access to extended data for the GP3000 Series and WinGP. 
            </remarks>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataReadExM(System.IntPtr,System.String,System.String,System.Int16,System.Int16)">
            <summary>
             
             
              Reads the Specification data stored in the SRAM of a GP Series node, and saves the data into a file on the PC.  
              Filing data are saved in binary format, and other types of data are saved in CSV format. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sSaveFileName">
             
               (In) File path of the file to save read data. 
            </param>
            <param name="sNodeName">
             
               (In) Name of read data source node.(Pro-Server EX nodes cannot be specified ) 
            </param>
            <param name="iBackupDataType">
             
               (In) Please select it from eEASY_BackupDataType.  
            </param>
            <param name="iSaveMode">
             
               (In) Specified Saving mode in eEASY_BackupData_SaveMode 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
            <remarks>
            
             Unlike EasyBackupDataRead(), this API enables access to extended data for the GP3000 Series and WinGP. 
            </remarks>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataReadExM(System.IntPtr,System.String,System.String,System.Int16,System.Int16,System.Int32)">
            <summary>
             
             
              Reads the Specification data stored in the SRAM of a GP Series node, and saves the data into a file on the PC.  
              Filing data are saved in binary format, and other types of data are saved in CSV format. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sSaveFileName">
             
               (In) File path of the file to save read data. 
            </param>
            <param name="sNodeName">
             
               (In) Name of read data source node.(Pro-Server EX nodes cannot be specified ) 
            </param>
            <param name="iBackupDataType">
             
               (In) Please select it from eEASY_BackupDataType.  
            </param>
            <param name="iSaveMode">
             
               (In) Specified Saving mode in eEASY_BackupData_SaveMode 
            </param>
            <param name="iNumber">
             
             
               (In) Data type that gives priority 
               This argument is valid when sSaveFileName specifies a file of the GP3000Series and WinGP. For a file of the GP Series, this argument is ignored. 
               In addition, the meaning of this argument varies depending on the value of iBackupDataType. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
            <remarks>
            
             Unlike EasyBackupDataRead(), this API enables access to extended data for the GP3000 Series and WinGP. 
            </remarks>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataReadExM(System.IntPtr,System.String,System.String,System.Int16,System.Int16,System.Int32,System.Int32)">
            <summary>
             
             
              Reads the Specification data stored in the SRAM of a GP Series node, and saves the data into a file on the PC.  
              Filing data are saved in binary format, and other types of data are saved in CSV format. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sSaveFileName">
             
               (In) File path of the file to save read data. 
            </param>
            <param name="sNodeName">
             
               (In) Name of read data source node.(Pro-Server EX nodes cannot be specified ) 
            </param>
            <param name="iBackupDataType">
             
               (In) Please select it from eEASY_BackupDataType.  
            </param>
            <param name="iSaveMode">
             
               (In) Specified Saving mode in eEASY_BackupData_SaveMode 
            </param>
            <param name="iNumber">
             
             
               (In) Data type that gives priority 
               This argument is valid when sSaveFileName specifies a file of the GP3000Series and WinGP. For a file of the GP Series, this argument is ignored. 
               In addition, the meaning of this argument varies depending on the value of iBackupDataType. 
            </param>
            <param name="iStringTable">
             
               (In) Reserve Always specify "0". 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
            <remarks>
            
             Unlike EasyBackupDataRead(), this API enables access to extended data for the GP3000 Series and WinGP. 
            </remarks>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataReadM(System.IntPtr,System.String,System.String,System.Int16,System.Int16)">
            <summary>
             
             
              Reads the Specification data stored in the SRAM of a GP Series node, and saves the data into a file on the PC.  
              Filing data are saved in binary format, and other types of data are saved in CSV format. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sSaveFileName">
             
               (In) File path of the file to save read data. 
            </param>
            <param name="sNodeName">
             
               (In) Name of read data source node.(Pro-Server EX nodes cannot be specified ) 
            </param>
            <param name="iBackupDataType">
             
               (In) Please select it from eEASY_BackupDataType.  
            </param>
            <param name="iSaveMode">
             
               (In) Specified Saving mode in eEASY_BackupData_SaveMode 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataWrite(System.String,System.String,System.Int16)">
            <summary>
             
              Writes specified filing data in binary format into the SRAM of a GP Series node. 
            </summary>
            <param name="sSourceFileName">
             
               (In) File path of binary-formatted filing data to be written 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node to write data. ( Pro-Server EX nodes, GP3000 Series nodes or WinGP nodes cannot be specified) 
            </param>
            <param name="iBackupDataType">
             
               (In) Fixed to "1". ("1" indicates filing data.) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyBackupDataWriteM(System.IntPtr,System.String,System.String,System.Int16)">
            <summary>
             
              Writes specified filing data in binary format into the SRAM of a GP Series node. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sSourceFileName">
             
               (In) File path of binary-formatted filing data to be written 
            </param>
            <param name="sNodeName">
             
               (In) Name of entry node to write data. ( Pro-Server EX nodes, GP3000 Series nodes or WinGP nodes cannot be specified) 
            </param>
            <param name="iBackupDataType">
             
               (In) Fixed to "1". ("1" indicates filing data.) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyIsCFCard(System.String)">
            <summary>
             
              Acquires connection status of the CF card in a connected GP. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to read status (This node name must be pre-registered in a network project.) 
            </param>
            <returns>
             
               State of CF card 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyIsCFCardM(System.IntPtr,System.String)">
            <summary>
             
              Acquires connection status of the CF card in a connected GP. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of GP node to read status (This node name must be pre-registered in a network project.) 
            </param>
            <returns>
             
               State of CF card 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetListInCard(System.String,System.String,System.Int32@,System.String)">
            <summary>
             
             
              Outputs a list of files from the CF card inserted in a GP node into a file specified with the parameter. 
              Only the file list in the directory specified with "sDirectory" can be output. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to output file list 
            </param>
            <param name="sDirectory">
             
               (In) Name of directory to output list (All capitals) 
            </param>
            <param name="oiCount">
             
               (Out) Number of output files 
            </param>
            <param name="sSaveFileName">
             
               (In) Name of file to save output directory information. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetListInCfCard(System.String,System.String,System.Int32@,System.String)">
            <summary>
             
             
             Outputs a list of files from the CF card inserted in a GP node into a file specified with the parameter. You can specify an optional file to save the file list. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to output file list 
            </param>
            <param name="sDirectory">
             
               (In) Name of folder to receive file list (All capitals) 
            </param>
            <param name="oiCount">
             
               (Out) Number of output files 
            </param>
            <param name="sSaveFileName">
             
               (In)Name of file to save output directory information. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetListRecursivelyInCard(System.String,System.String,System.Int32@,System.String)">
            <summary>
             
             
              Outputs a list of files in the CF card inserted in the GP into a file specified with the parameter. 
              All files acquired by recursively searching the directory or below which is specified with "sDirectory" are read. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to output file list 
            </param>
            <param name="sDirectory">
             
               (In) Name of directory to output list (All capitals) 
            </param>
            <param name="oiCount">
             
               (Out) Number of output files 
            </param>
            <param name="sSaveFileName">
             
               (In) Name of file to save output directory information. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetListRecursivelyInCfCard(System.String,System.String,System.Int32@,System.String)">
            <summary>
             
             
             
              Outputs a list of files in the CF card inserted in the GP into a file specified with the parameter. 
              You can specify an optional folder to acquire the file list. 
              All files acquired by recursively searching the files or below which is specified with the parameter are read. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to output file list 
            </param>
            <param name="sDirectory">
             
               (In) Name of folder to receive file list (All capitals) 
            </param>
            <param name="oiCount">
             
               (Out) Number of output files 
            </param>
            <param name="sSaveFileName">
             
               (In)Name of file to save output directory information. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileReadCard(System.String,System.String,System.Int16,System.String,System.Int32@)">
            <summary>
             
              Reads a specified file from the CF card. Only the file type specified with "pReadFileType" can be read. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to read file 
            </param>
            <param name="sReadFileType">
             
               (In) Type of source file to be read from CF card 
            </param>
            <param name="wReadFileNo">
             
               (In) File number of source file to be read from CF card 
            </param>
            <param name="sWriteFileName">
             
               (In) File name preservation of read CF file ahead 
            </param>
            <param name="odwFileSize">
             
               (Out) Size of read CF file 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileReadInCfCard(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
             
              Reads a specified file from the CF card. You can specify an optional file to read. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to read file 
            </param>
            <param name="sFolderName">
             
               (In) Name of folder containing source file to be read from CF card (Up to 32 single-byte characters) 
            </param>
            <param name="sFileName">
             
               (In) Name of source file to be read from CF card (Up to 8.3 format character string) 
            </param>
            <param name="sWriteFileName">
             
               (In) File name preservation of read CF file ahead 
            </param>
            <param name="odwFileSize">
             
               (Out) Size of read CF file 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileWriteCard(System.String,System.String,System.String,System.Int16)">
            <summary>
             
              Writes a specified file into the CF card. Only the file type specified with "pWriteFileType" can be written. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to write file 
            </param>
            <param name="sReadFileName">
             
               (In) Name of source file to be written into CF card (Full path) 
            </param>
            <param name="sWriteFileType">
             
               (In) Type of target file in CF card 
            </param>
            <param name="wWriteFileNo">
             
               (In) File number of target file in CF card 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileWriteInCfCard(System.String,System.String,System.String,System.String)">
            <summary>
             
              Writes a specified file into the CF card. You can specify an optional file to write. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to write file 
            </param>
            <param name="sReadFileName">
             
               (In) Name of source file to be written into CF card (Full path) 
            </param>
            <param name="sFolderName">
             
               (In) Name of folder containing target file in CF card (Up to 32 single-byte characters) 
            </param>
            <param name="sFileName">
             
               (In) Name of target file in CF card (Up to 8.3 format character string) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileDeleteCard(System.String,System.String,System.Int16)">
            <summary>
             
              Deletes a specified file from the CF card. Only the file type specified with "pDeleteFileType" can be deleted. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node containing file to be deleted 
            </param>
            <param name="sDeleteFileType">
             
               (In) Type of file to be deleted from CF card 
            </param>
            <param name="wDeleteFileNo">
             
               (In) File number to be deleted from CF card 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileDeleteInCfCard(System.String,System.String,System.String)">
            <summary>
             
              Deletes a specified file from the CF card. You can specify an optional file to delete. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node containing file to be deleted 
            </param>
            <param name="sFolderName">
             
               (In) Name of folder containing file to be deleted from CF card (Up to 32 single-byte characters) 
            </param>
            <param name="sFileName">
             
               (In) Name of file to be deleted from CF card (Up to 8.3 format character string) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileRenameInCfCard(System.String,System.String,System.String,System.String)">
            <summary>
             
              Renames a specified file in the CF card. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to write file 
            </param>
            <param name="sFolderName">
             
               (In) Name of folder containing file to be renamed in CF card (Up to 32 singlebyte characters) 
            </param>
            <param name="sFileName">
             
               (In) Name to file to be renamed in CF card (Up to 8.3 format character string) 
            </param>
            <param name="sFileRename">
             
               (In)New file name (Up to 8.3 format character string) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetCfFreeSpace(System.String,System.Int32@)">
            <summary>
             
              Acquires information on empty space in the CF card connected to a specified entry node. 
            </summary>
            <param name="sNodeName">
         
               (In) Name of GP node to output free space 
            </param>
            <param name="oiUnallocated">
             
               (Out) Empty space in CF card (number of bytes) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileSetPassiveMode(System.Int32)">
            <summary>
             
              'Pro-Server EX' uses a special protocol to access the CF card in a GP Series node. However, to access a GP3000 Series node and WinGP node, FTP protocol is used. 
              For FTP protocol, 'Pro-Server EX' supports two modes: normal mode and passive mode. This API specifies the mode of FTP protocol. 
            </summary>
            <param name="iPassive">
             
               (In)		0: Normal mode 		Other than 0: Passive mode
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyIsSDCard(System.String)">
            <summary>
             
              Acquires connection status of the SD card in a connected GP. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to read status (This node name must be pre-registered in a network project.) 
            </param>
            <returns>
             
               State of SD card 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyIsSDCardM(System.IntPtr,System.String)">
            <summary>
             
              Acquires connection status of the SD card in a connected GP. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of GP node to read status (This node name must be pre-registered in a network project.) 
            </param>
            <returns>
             
               State of SD card 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetListInSdCard(System.String,System.String,System.Int32@,System.String)">
            <summary>
             
             
             Outputs a list of files from the SD card inserted in a GP node into a file specified with the parameter. You can specify an optional file to save the file list. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to output file list 
            </param>
            <param name="sDirectory">
             
               (In) Name of folder to receive file list (All capitals) 
            </param>
            <param name="oiCount">
             
               (Out) Number of output files 
            </param>
            <param name="sSaveFileName">
             
               (In)Name of file to save output directory information. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetListRecursivelyInSdCard(System.String,System.String,System.Int32@,System.String)">
            <summary>
             
             
             
              Outputs a list of files in the SD card inserted in the GP into a file specified with the parameter. 
              You can specify an optional folder to acquire the file list. 
              All files acquired by recursively searching the files or below which is specified with the parameter are read. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to output file list 
            </param>
            <param name="sDirectory">
             
               (In) Name of folder to receive file list (All capitals) 
            </param>
            <param name="oiCount">
             
               (Out) Number of output files 
            </param>
            <param name="sSaveFileName">
             
               (In)Name of file to save output directory information. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileReadInSdCard(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
             
              Reads a specified file from the SD card. You can specify an optional file to read. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to read file 
            </param>
            <param name="sFolderName">
             
               (In) Name of folder containing source file to be read from SD card (Up to 32 single-byte characters) 
            </param>
            <param name="sFileName">
             
               (In) Name of source file to be read from SD card (Up to 8.3 format character string) 
            </param>
            <param name="sWriteFileName">
             
               (In) File name preservation of read SD file ahead 
            </param>
            <param name="odwFileSize">
             
               (Out) Size of read SD file 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileWriteInSdCard(System.String,System.String,System.String,System.String)">
            <summary>
             
              Writes a specified file into the SD card. You can specify an optional file to write. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to write file 
            </param>
            <param name="sReadFileName">
             
               (In) Name of source file to be written into SD card (Full path) 
            </param>
            <param name="sFolderName">
             
               (In) Name of folder containing target file in SD card (Up to 32 single-byte characters) 
            </param>
            <param name="sFileName">
             
               (In) Name of target file in SD card (Up to 8.3 format character string) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileDeleteInSdCard(System.String,System.String,System.String)">
            <summary>
             
              Deletes a specified file from the SD card. You can specify an optional file to delete. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node containing file to be deleted 
            </param>
            <param name="sFolderName">
             
               (In) Name of folder containing file to be deleted from SD card (Up to 32 single-byte characters) 
            </param>
            <param name="sFileName">
             
               (In) Name of file to be deleted from SD card (Up to 8.3 format character string) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyFileRenameInSdCard(System.String,System.String,System.String,System.String)">
            <summary>
             
              Renames a specified file in the SD card. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to write file 
            </param>
            <param name="sFolderName">
             
               (In) Name of folder containing file to be renamed in SD card (Up to 32 singlebyte characters) 
            </param>
            <param name="sFileName">
             
               (In) Name to file to be renamed in SD card (Up to 8.3 format character string) 
            </param>
            <param name="sFileRename">
             
               (In)New file name (Up to 8.3 format character string) 
            </param>
            <returns>
            
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetSdFreeSpace(System.String,System.Int32@)">
            <summary>
             
              Acquires information on empty space in the SD card connected to a specified entry node. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to output free space 
            </param>
            <param name="oiUnallocated">
             
               (Out) Empty space in SD card (number of bytes) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetCfFreeSpaceEx(System.String,System.Int32@,System.Int32@)">
            <summary>
             
              Acquires information on empty space in the CF card connected to a specified entry node. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to output free space 
            </param>
            <param name="oiUnallocatedL">
             
               (Out) Low-order 4 bytes of empty space in CF card (number of bytes) 
            </param>
            <param name="oiUnallocatedH">
             
               (Out) High-order 4 bytes of empty space in CF card (number of bytes) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetSdFreeSpaceEx(System.String,System.Int32@,System.Int32@)">
            <summary>
             
              Acquires information on empty space in the SD card connected to a specified entry node. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to output free space 
            </param>
            <param name="oiUnallocatedL">
             
               (Out) Low-order 4 bytes of empty space in SD card (number of bytes) 
            </param>
            <param name="oiUnallocatedH">
             
               (Out) High-order 4 bytes of empty space in SD card (number of bytes) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetGPTime(System.String,System.Int32@)">
            <summary>
             
             
              Acquires current time of a specified node as a DWORD-type value. This function is valid only for the time saved in 6 words from LS2048. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of target node (A Pro-Server EX node cannot be specified.) 
            </param>
            <param name="odwTime">
             
               (Out) Acquired time (Time is acquired as a value of DWORD type, (substantially, time_t type defined by ANSI).) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetGPTimeString(System.String,System.String,System.String@)">
            <summary>
             
             
              Acquires current time of a specified node as an character string. This function is valid only for the time saved in 6 words from LS2048. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of target node (A Pro-Server EX node cannot be specified.) 
            </param>
            <param name="sFormat">
             
               (In) String to specify the format of time to be acquired as a string. 
            </param>
            <param name="osTime">
             
               (Out) Time acquired as a string 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetGPTimeStringVariant(System.String,System.String,System.Object@)">
            <summary>
             
             
              Acquires current time of a specified node as a Object-type character string. This function is valid only for the time saved in 6 words from LS2048. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of target node (A Pro-Server EX node cannot be specified.) 
            </param>
            <param name="sFormat">
             
               (In) String to specify the format of time to be acquired as a string. 
            </param>
            <param name="ovTime">
             
               (Out) Time acquired as a string 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyGetGPTimeVariant(System.String,System.Object@)">
            <summary>
             
             
              Acquires current time of a specified node as a Object-type value. This function is valid only for the time saved in 6 words from LS2048. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of target node (A Pro-Server EX node cannot be specified.) 
            </param>
            <param name="ovTime">
             
               (Out) Acquired time (Time is acquired as a value of Object type. Internal possessing format is "Date".) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.GetNodeProperty(System.String,System.Int32,System.String@,System.String@,System.String@,System.String@)">
            <summary>
             
              Acquires connected GP node status. Since the response time-out value can be changed, this function can be used to check connection status. 
            </summary>
            <param name="sNodeName">
             
               (In) Name of GP node to read status 
            </param>
            <param name="dwTimeLimit">
             
               (In) Response time-out setting value(If "0" is specified, it is set to the default value of 3000 ms.) 
            </param>
            <param name="osGPType">
             
               (Out) GP model code 
            </param>
            <param name="osSystemVersion">
             
               (Out) GP system version 
            </param>
            <param name="osComVersion">
             
               (Out) PLC protocol driver version 
            </param>
            <param name="osECOMVersion">
             
               (Out) 2Way driver version ( For Pro-Server EX nodes or GP3000 Series nodes/WinGP nodes, this item is blank.) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.GetNodePropertyM(System.IntPtr,System.String,System.Int32,System.String@,System.String@,System.String@,System.String@)">
            <summary>
             
              Acquires connected GP node status. Since the response time-out value can be changed, this function can be used to check connection status. 
            </summary>
            <param name="hProServer">
             
               (In) Pro-Server handle 
            </param>
            <param name="sNodeName">
             
               (In) Name of GP node to read status 
            </param>
            <param name="dwTimeLimit">
             
               (In) Response time-out setting value(If "0" is specified, it is set to the default value of 3000 ms.) 
            </param>
            <param name="osGPType">
             
               (Out) GP model code 
            </param>
            <param name="osSystemVersion">
             
               (Out) GP system version 
            </param>
            <param name="osComVersion">
             
               (Out) PLC protocol driver version 
            </param>
            <param name="osECOMVersion">
             
               (Out) PLC protocol driver version ( For Pro-Server EX nodes or GP3000 Series nodes/WinGP nodes, this item is blank.) 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.GetCountOfSymbolMember(System.String,System.String,System.Int32@)">
             <summary>
            	 
            	  Acquires the number of members of a group or symbol sheet (total number of symbols and group members). 
             </summary>
             <param name="sNodeName">
            	 
            	   (In) Name of entry node with Device/PLC name 
             </param>
             <param name="sSymbolName">
            	 
            	   (In) Name of target group symbol or symbol sheet 
             </param>
             <param name="oiCountOfMember">
            	 
            	   (Out) Number of members acquired 
             </param>
             <returns>
            	 
            	   Normal end: 0  Abnormal end: Error code 
             </returns>
             <remarks>
              
              When a group symbol exists in a specified group symbol, the number of members is counted as one, even if multiple device symbols exist in the inner group symbol. 
            </remarks>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.GetSymbolInformation(System.String,System.String,System.Int32,System.String@,ProEasyDotNet.ProEasy.SymbolInformation[]@,System.Int32@)">
            <summary>
             
              Acquires definition information (data type, data quantity, etc.) 
            </summary>
            <param name="sNodeName">
             
               (In) Name of entry node with Device/PLC name 
            </param>
            <param name="sSymbolName">
             
               (In) Name of symbol/group/symbol sheet 
            </param>
            <param name="iMaxCountOfSymbolMember">
             
               (In) Specify a value of the maximum count of desired information + 1. 
            </param>
            <param name="osSymbolSheetName">
             
               (Out) The API returns the name of symbol sheet that contains the symbol specified with sSymbolName. 
            </param>
            <param name="oSymbolInformation">
             
               (Out) The API returns acquired detail information in the alignment structure. 
            </param>
            <param name="oiGotCountOfSymbolMember">
             
               (Out) The API returns the information quantity that has returned to oSymbolInformation. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyTIMEToString(System.Int32,System.String@)">
            <summary>
             
              This specified value is convert to string TIME format. 
            </summary>
            <param name="dwData">
             
              (In) Number to be converted. 
            </param>
            <param name="osTime">
             
              (Out) String TIME format result. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyTIME_OF_DAYToString(System.Int32,System.String@)">
            <summary>
             
              This specified value is convert to string TIME_OF_DAY format. 
            </summary>
            <param name="dwData">
             
              (In) Number to be converted. 
            </param>
            <param name="osTod">
             
              (Out) String TIME_OF_DAY format result. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyDATEToString(System.Int32,System.String@)">
            <summary>
             
              This specified value is convert to string DATE format. 
            </summary>
            <param name="dwData">
             
              (In) Number to be converted. 
            </param>
            <param name="osDate">
             
              (Out) String DATE format result. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyDATE_AND_TIMEToString(System.Int64,System.String@)">
            <summary>
             
              This specified value is convert to string DATE_AND_TIME format. 
            </summary>
            <param name="qwData">
             
              (In) Number to be converted. 
            </param>
            <param name="osDt">
             
              (Out) String DATE_AND_TIME format result. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyStringToTIME(System.String,System.Int32@)">
            <summary>
             
              This specified string TIME format is convert to value. 
            </summary>
            <param name="sTime">
             
              (In) String TIME format to be converted. 
            </param>
            <param name="pdwData">
             
              (Out) Number result. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyStringToTIME_OF_DAY(System.String,System.Int32@)">
            <summary>
             
              This specified string TIME_OF_DAY format is convert to value. 
            </summary>
            <param name="sTod">
             
              (In) String TIME_OF_DAY format to be converted. 
            </param>
            <param name="pdwData">
             
              (Out) Number result. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyStringToDATE(System.String,System.Int32@)">
            <summary>
             
              This specified string DATE format is convert to value. 
            </summary>
            <param name="sDate">
             
              (In) String DATE format to be converted. 
            </param>
            <param name="pdwData">
             
              (Out) Number result. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyStringToDATE_AND_TIME(System.String,System.Int64@)">
            <summary>
             
              This specified string DATE_AND_TIME format is convert to value. 
            </summary>
            <param name="sDt">
             
              (In) String DATE_AND_TIME format to be converted. 
            </param>
            <param name="pqwData">
             
              (Out) Number result. 
            </param>
            <returns>
             
               Normal end: 0  Abnormal end: Error code 
            </returns>
        </member>
        <member name="T:ProEasyDotNet.ProEasy.SymbolInformation">
            <summary>
             
              struct SymbolInformation 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.SymbolInformation.m_wAppKind">
            <summary>
             
              Data type, Symbol: 1 to 12, Group: 0x8000 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.SymbolInformation.m_wDataCount">
            <summary>
             
              Data quantity 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.SymbolInformation.m_dwSizeOf">
            <summary>
             
              Number of bytes in buffer required for access 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.SymbolInformation.m_sSymbolName">
            <summary>
             
              Name of symbol or group 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.SymbolInformation.m_sDeviceAddress">
            <summary>
             
              Device address (For group, leave it blank.) 
            </summary>
        </member>
        <member name="T:ProEasyDotNet.ProEasy.EasyDirInfo">
            <summary>
             
              Structure that stores file list in CF card  
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyDirInfo.bFileName">
            <summary>
             
              File name (Terminated with "0") 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyDirInfo.bExt">
            <summary>
             
              File extension (Terminated with "0") 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyDirInfo.bDummy">
            <summary>
             
              Dummy 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyDirInfo.dwFileSize">
            <summary>
             
              File size 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyDirInfo.bFileTimeStamp">
            <summary>
             
              File timestamp (Terminated with "0") 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyDirInfo.bDummy2">
            <summary>
             
              Dummy 
            </summary>
        </member>
        <member name="T:ProEasyDotNet.ProEasy.EasyRecursiveDirInfo">
            <summary>
             
             
              Structure that stores a file list in CF card 
              (For the "EasyGetListRecursivelyInXXX functions") 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyRecursiveDirInfo.bFileName">
            <summary>
             
              File name (Terminated with "0") 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyRecursiveDirInfo.bExt">
            <summary>
             
              File extension (Terminated with "0") 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyRecursiveDirInfo.bDummy">
            <summary>
             
              Dummy 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyRecursiveDirInfo.dwFileSize">
            <summary>
             
              File size 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyRecursiveDirInfo.bFileTimeStamp">
            <summary>
             
              File timestamp (Terminated with "0") 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyRecursiveDirInfo.bFolderName">
            <summary>
             
              Folder name (Terminated with "0") 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.EasyRecursiveDirInfo.bDummy2">
            <summary>
             
              Dummy 
            </summary>
        </member>
        <member name="T:ProEasyDotNet.ProEasy.eEASY_AppKind">
            <summary>
             
              Data type 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.Bit">
            <summary>
             
              Bit Data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.SignedWord">
            <summary>
             
              16-bit(Signed) Data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.UnsignedWord">
            <summary>
             
              16-bit(Unsigned) Data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.HexWord">
            <summary>
             
              16-bit(HEX) Data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.BCDWord">
            <summary>
             
              16-bit(BCD) Data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.SignedDWord">
            <summary>
             
              32-bit(Signed) Data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.UnsignedDWord">
            <summary>
             
              32-bit(Unsigned) Data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.HexDWord">
            <summary>
             
              32-bit(HEX) Data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.BCDDWord">
            <summary>
             
              32-bit(BCD) Data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.Float">
            <summary>
             
              Single-precision floating point data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.Real">
            <summary>
             
              Double-precision floating point data
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.Str">
            <summary>
             
              Character-string data 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.BOOL">
            <summary>
             
              Handles bit data as Variant BOOL data per bit. 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.Default">
            <summary>
             
              Indicates that the data type defined for a symbol is used with the API that can use the symbol as the device address. 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.Group">
            <summary>
             
              Group symbol 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_AppKind.SymbolSheet">
            <summary>
             
              Symbol sheet 
            </summary>
        </member>
        <member name="T:ProEasyDotNet.ProEasy.eEASY_BackupData_SaveMode">
            <summary>
             
              The preservation method of the backup data is specified.  
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupData_SaveMode.SaveMode_Rewrite">
            <summary>
          
              New (If a file with the same name already exists, 'Pro-Server EX' deletes the file, and overwrites it.) 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupData_SaveMode.SaveMode_Append">
            <summary>
             
              Add (The read data is added to the end of an existing file. If there is no file to save the data, 'Pro-Server EX' creates a new file.) 
            </summary>
        </member>
        <member name="T:ProEasyDotNet.ProEasy.eEASY_BackupDataType">
            <summary>
             
              Kind of backup data type 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.FILING">
            <summary>
             
             
              Data source node in GP Series : Filing data 
              Data source node in GP3000 Series or WinGP : Filing data 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.LOG">
            <summary>
             
             
              Data source node in GP Series : Logging data 
              Data source node in GP3000 Series or WinGP : Sampling data of sampling group No. 1 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.TREND">
            <summary>
             
             
              Data source node in GP Series : Line graph data 
              Data source node in GP3000 Series or WinGP : Data of all sampling groups other than sampling group No. 1
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.SAMPLING">
            <summary>
             
             
              Data source node in GP Series : Sampling data 
              Data source node in GP3000 Series or WinGP : Data of all sampling groups other than sampling group No. 1 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMBLOCK1">
            <summary>
             
             
              Data source node in GP Series :  Alarm block 1 
              Data source node in GP3000 Series or WinGP :  Alarm block 1 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMBLOCK2">
            <summary>
             
             
              Data source node in GP Series : Alarm history or Alarm block 2 
              Data source node in GP3000 Series or WinGP : Alarm block 2 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMBLOCK3">
            <summary>
             
             
              Data source node in GP Series : Alarm log or Alarm block 3 
              Data source node in GP3000 Series or WinGP : Alarm block 3 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMBLOCK4">
            <summary>
             
             
              Data source node in GP Series : Alarm block 4 
              Data source node in GP3000 Series or WinGP : Alarm block 4 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMBLOCK5">
            <summary>
             
             
              Data source node in GP Series : Alarm block 5 
              Data source node in GP3000 Series or WinGP : Alarm block 5 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMBLOCK6">
            <summary>
             
             
              Data source node in GP Series : Alarm block 6 
              Data source node in GP3000 Series or WinGP : Alarm block 6 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMBLOCK7">
            <summary>
             
             
              Data source node in GP Series : Alarm block 7 
              Data source node in GP3000 Series or WinGP : Alarm block 7 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMBLOCK8">
            <summary>
             
             
              Data source node in GP Series : Alarm block 8 
              Data source node in GP3000 Series or WinGP : Alarm block 8 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMHISTRY">
            <summary>
             
             
              Data source node in GP Series : Alarm history or Alarm block 2 
              Data source node in GP3000 Series or WinGP : Alarm block 2 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.ALARMLOG">
            <summary>
             
             
              Data source node in GP Series : Alarm log or Alarm block 3 
              Data source node in GP3000 Series or WinGP : Alarm block 3 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_BackupDataType.SAMPLING_With_Group">
            <summary>
             
             
              Data source node in GP Series : (Reserve) 
              Data source node in GP3000 Series or WinGP : Sampling group of a specific group number Specify iNumber for group number. 
            </summary>
        </member>
        <member name="T:ProEasyDotNet.ProEasy.eEASY_LogLevel">
            <summary>
             
              Event type of log viewer 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_LogLevel.AppEnd">
            <summary>
             
              User program closing message 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_LogLevel.AppError">
            <summary>
             
              User program error message 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_LogLevel.AppMessage1">
            <summary>
             
              User program detail message 1 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_LogLevel.AppMessage2">
            <summary>
             
              User program detail message 2 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_LogLevel.AppStart">
            <summary>
             
              User program starting message 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_LogLevel.AppWarning">
            <summary>
             
              User program warning message 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_LogLevel.SysError">
            <summary>
             
              System error message 
            </summary>
        </member>
        <member name="F:ProEasyDotNet.ProEasy.eEASY_LogLevel.SysMessage">
            <summary>
             
              System message 
            </summary>
        </member>
        <member name="T:ProEasyDotNet.ProEasy.EasyObject">
            <summary>
             
              Class that uses it for Variant type access 
            </summary>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyObject.#ctor">
            <summary>
             
              Default constructor 
            </summary>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyObject.#ctor(System.Object)">
            <summary>
             
              constructor 
            </summary>
            <param name="in_Object">
             
               Object data  
            </param>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyObject.GetArray">
            <summary>
             
              The data of the Object type is converted into the Array type and it takes it out. 
            </summary>
            <returns>
             
               Data of Array type 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyObject.GetObjectA">
            <summary>
             
              The object type data is taken out.  
            </summary>
            <returns>
             
               object type data 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyObject.GetStringData">
            <summary>
             
              If the data type that returns the data of the String type is not String if the data type of Object is string type, NULL is returned.  
            </summary>
            <returns>
             
               Data of String type 
            </returns>
        </member>
        <member name="M:ProEasyDotNet.ProEasy.EasyObject.SetObject(System.Object)">
            <summary>
             
              The Object type data is set 
            </summary>
            <param name="in_Object">
             
               Object type data 
            </param>
        </member>
    </members>
</doc>